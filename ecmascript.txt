堆 和 栈

原始类型:
undefined
boolean
string
number
object的引用(null或者引用)。
原始类型占据的空间是固定的，存放在栈中，
在许多语言中，字符串都被看作引用类型，而非原始类型，因为字符串的长度是可变的。ECMAScript打破了这一传统。


/--------------------------------------------------/
对变量或值调用typeof运算符将返回下列值之一：（都是返回字符串）  typeof sTemp

undefined
boolean
string
number
object  //对象的引用或者null
(function)  特殊的object
/--------------------------------------------------/

var oTemp;
alert(oTemp == undefined);  //输出 true

var oTemp;
alert(typeof oTemp); //输出字符串 "undefined"

//注意的一点
alert(null == undefined);  //输出 "true"

 == 和 ===的区别，类型转换

/--------------------------------------------------/

function Car(color) {
    this.color = color;
}
Car.prototype.showColor = function(){alert(this.color)}

var car = new Car("blue");



构造函数 Car()  ------prototype-------> 原型对象 -----__proto__------> 原型对象
                <------constructor----
|					  /\
|					  |
new					  |
|					  |
|					  |
\/					  |
					  |
实例 car ------__proto__------------------


instanceof是判断实例对象的__proto__和生成该实例的构造函数的prototype是不是引用的同一个地址。

/--------------------------------------------------/
var person2 = Object.create(person1);


create() 实际做的是从指定原型对象创建一个新的对象。这里以 person1 为原型对象创建了 person2 对象。在控制台输入：
person2.__proto__
结果返回对象person1

/--------------------------------------------------/
标准继承方法

function Person(name) {
	this.name = name;
}
Person.prototype.greet = function() {
}

function Teacher(name, age) {
	Person.call(this,name);
	this.age = age;
}
Teacher.prototype = Object.create(Person.prototype);
Teacher.prototype.constructor = Teacher;


Fn.call(this,A,B);

Fn.apply(this,[A,B]);

Fn.bind(this,A,B)();



/--------------------------------------------------/

String (原始类型)
属性：
length

方法：
str.charAt(2) 返回在指定位置的字符。

var n = str1.concat(str2);  连接两个字符串   本身不修改   //数组也有相同的方法

var n=str.indexOf("welcome");  没有出现则返回-1    //数组也有相同的方法
lastIndexOf() 从后向前

var n=str.replace("Microsoft","W3CSchool");  自身不变

let a = "abcdefg";
console.log(a.substring(1,3));  bc
console.log(a.slice(1,3));    bc     //数组也有相似的方法

split()    //split('')  字符串全分解
'a,b;; c  d'.split(/[\s\,\;]+/); // ['a', 'b', 'c', 'd']   \s 是指非字符类的字符串

match()      参数为字符串或正则表达式   返回为数组
let a = "is a is a";
let arr = a.match(/is/g);   返回为长度为2的数组["is","is"]

/--------------------------------------------------/

正则表达式

test("lalalal")  //返回true false
exec("lalalal")  //返回数组，数组长度似乎永远为1，无论/g 


String 支持正则表达式的方法：

search();
match();
replace();
split();

/--------------------------------------------------/

Array  (一个对象)

ret= arr1.concat(arr2);   自身不变
indexOf / lastIndexOf
join(",")   转字符串  (与String的split 呼应)
slice

map(function(val) {      //改变数组里的每一个值  //原数组不变
	return val * 3;
})

filter    //true 包含在数组里，false排除在数组外

some(function(val) {         //一个元素返回true，some就返回true
	return val > 18;
})   

<------          

sort  //排序                          不会生成副本！ 原数组改变
var points = [40,100,1,5,25,10];
points.sort(function(a,b){return a-b});
输出结果：
1,5,10,25,40,100   //从小到大


这个方法的排序是看回调函数的返回值：

 如果返回值大于 0，则位置互换。
 如果返回值小于 0，则位置不变。

------>

push / pop   数组末尾做操作

unshift  / shift   数组开头做操作  

reverse  颠倒

splice  //vue中很重要的操作方法，可以修改数组本身      //返回的是被删除掉的元素！！

------

变异方法
push()
pop()

unshift()
shift()

splice()
sort()   ！！！！！！！！！改变原始数组
reverse()
fill()

------
非变异方法
filter  concat   map  slice

------
let arr = Array.from(original);
//常用的使用方法
// NodeList对象
let ps = document.querySelectorAll('p');
Array.from(ps).forEach(function (p) {
  console.log(p);
});
------
fill 方法
['a', 'b', 'c'].fill(7)
// [7, 7, 7]
------
数组的空位：
数组arr有两个空位，for...of并没有忽略它们。如果改成map方法遍历，空位是会跳过的。
entries()、keys()、values()、find()和findIndex()会将空位处理成undefined。

------
数组的遍历
for (let [index, elem] of ['a', 'b'].entries()) {
  console.log(index, elem);
}
for(let a of arr)
forEach
------

/--------------------------------------------------/
Number (原始类型)

//数字转字符串的几种方法 
1，toString(x)   //参数为进制，不填则为10进制 

// toString 返回各种进制的字符串
var myNumber=128;
myNumber.toString(16);   // returns 80 
myNumber.toString(8);    // returns 200
myNumber.toString(2);    // returns 10000000

2，toFixed(2)   //小数点后两位

3，toPrecision(x)    //精度位数为X，用0补齐

4，toExponential(x)   //指数计数法  x为小数位数

//字符串转数组     ES6的写法
Number.parseInt('12.34') // 12
Number.parseFloat('123.45#') // 123.45

/--------------------------------------------------/

特殊的number 
infinity
NaN
isFinite()
isNaN(); 字符无法转换为数值


引用类型（class）
/--------------------------------------------------/
Number的引用类型：

//得到原始数值
var iNumber = oNumberObject.valueOf();

var oNumber = new Number(68);
oNumber.toFixed(2)  //输出 "68.00"   指定位数的字符串

oNumberObject.toExponential(1);  //输出 "6.8e+1"
/--------------------------------------------------/
function的arguments
->模拟重载

function doAdd() {
  if(arguments.length == 1) {
    alert(arguments[0] + 5);
  } else if(arguments.length == 2) {
    alert(arguments[0] + arguments[1]);
  }
}
doAdd(10);	//输出 "15"
doAdd(40, 20);	//输出 "60"
/--------------------------------------------------/
闭包：
当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包
function A() {
    var count = 0;
    function B() {
       count ++;
       console.log(count);
    }
    return B;
}
var C = A();
C();// 1
C();// 2
C();// 3

注意： count似乎变成了全局变量

/--------------------------------------------------/



在使用typeof运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回"object"。
ECMAScript引入了另一个Java运算符instanceof来解决这个问题。
student1 instanceof Student    //true false
/--------------------------------------------------/

把对象的所有引用都设置为 null，可以强制性地废除对象

类的定义：
联合使用构造函数和原型方式
即用构造函数定义对象的所有非函数属性，用原型方式定义对象的函数属性（方法）。
结果是，所有函数都只创建一次，而每个对象都具有自己的对象属性实例。

创建类的最好方式是用构造函数定义属性，用原型定义方法。

function Car(sColor,iDoors,iMpg) {
  this.color = sColor;
  this.doors = iDoors;
  this.mpg = iMpg;
  this.drivers = new Array("Mike","John");
}

Car.prototype.showColor = function() {
  alert(this.color);
};

var oCar1 = new Car("red",4,23);
/--------------------------------------------------/
不要这样加：
var str = "hello ";
str += "world";

这样加：
var arr = new Array();
arr[0] = "hello ";
arr[1] = "world";
var str = arr.join("");  //concat
/--------------------------------------------------/
避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句
// 函数声明语句
{
  let a = 'secret';
  function f() {
    return a;
  }
}

// 函数表达式
{
  let a = 'secret';
  let f = function () {
    return a;
  };
}
/--------------------------------------------------/
对于const来说，只声明不赋值，就会报错
const a;  //报错
/--------------------------------------------------/
数组的解构：
let [head,middle, ...tail] = [1, 2, 3, 4];
head // 1
middle //2
tail // [3, 4]

对象的解构
let obj = { first: 'hello', last: 'world' };
let { first: f, last: l } = obj;

由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。
var arr = [1, 2, 3];
var {0 : first, [arr.length - 1] : last} = arr;
first // 1
last // 3

只要某种数据结构具有Iterator接口，都可以采用数组形式的解构赋值
set map

如果要将一个已经声明的变量用于解构赋值，必须非常小心。
// 错误的写法
var x;
{x} = {x: 1};
// SyntaxError: syntax error

// 正确的写法
({x} = {x: 1});

/--------------------------------------------------/

//把对象转化为数组   Array.from(object_)
let arrayLike = {
    '0': 'a',
    '1': 'b',
    '2': 'c',
    length: 3
};
// ES6的写法
let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']
实际应用中，常见的类似数组的对象是DOM操作返回的NodeList集合

值得提醒的是，扩展运算符（...）也可以将某些数据结构转为数组
// NodeList对象
[...document.querySelectorAll('div')]


//对象的合并
Object.assign()  
//可以用来克隆对象
function clone(origin) {
  return Object.assign({}, origin);
}

//对象的遍历
var obj = { foo: "bar", baz: 42 };
Object.keys(obj)
// ["foo", "baz"]

------
rest参数：（让逗号变成数组）
扩展运算符：(让数组变成逗号)  (数组转为参数序列)  (只要实现了iterator,就能使用：set map)

function push(array, ...items) {  //rest参数
  array.push(...items);   //扩展运算符
}

push(myArr,1,2,3)

------
扩展运算符的用法：
1，合并数组
[...arr1, ...arr2, ...arr3]

2，任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。  //等同于Array.from
var nodeList = document.querySelectorAll('div');
var array = [...nodeList];


------
箭头函数
1，this 指针很有用；
2，
// 正常函数写法
[1,2,3].map(function (x) {
  return x * x;
});

// 箭头函数写法
[1,2,3].map(x => x * x);

------

箭头函数：
var sum = (num1, num2) => num1 + num2;
var sum = (num1, num2) => { return num1 + num2; }
// 等同于
var sum = function(num1, num2) {
  return num1 + num2;
};
继承环境中的this指针
/----------------------四种数据集合 array object set map ----------------------------/
Set
SET成员的值都是唯一的，没有重复的值

属性: size
方法：add(val)  delete(val)  has(val)   clear()


数组去重:
Arr = [...new Set(Arr)];

Array.from方法可以将Set结构转为数组。
var items = new Set([1, 2, 3, 4, 5]);
var array = Array.from(items);

WeakSet 包含的是对象的弱引用，垃圾回收机制会忽略它；



/--------------------------------------------------/
Map
传统对象是“字符串-值”的键值对
Map是“值(内存地址)-值”的键值对  //键限制于字符串

属性: size
方法：set(key,val)  get(key)  has(key)  delete(key)   clear()

//遍历方法
for (let [key, value] of map.entries()) {
  console.log(key, value);
}


ES6模块的import和export用法总结
ES6之前已经出现了js模块加载的方案，最主要的是CommonJS和AMD规范。


/********************************************************************/
Object.entries方法的另一个用处是，将对象转为真正的Map结构。

const obj = { foo: 'bar', baz: 42 };
const map = new Map(Object.entries(obj));







/********************************************************************/



/--------------------------------------------------/
匿名函数


/--------------------------------------------------/
相等运算符（==）和严格相等运算符（===）。
它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身

/--------------------------------------------------/
我们曾经讲解过创建类的最好方式是用构造函数定义属性，用原型定义方法。
这种方式同样适用于继承机制，用对象冒充继承构造函数的属性，
用原型链继承 prototype 对象的方法

本质原因，prototype里的是公用的

/--------------------------------------------------/
对象的遍历
（1）for...in
for...in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。

（2）Object.keys(obj)
Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。

/--------------------------------------------------/

由于ES6输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错,
注意：对象模块本质上传过来的是指针，所以对象内容的修改没有问题；

------

export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。

export var foo = 'bar';
setTimeout(() => foo = 'baz', 500);
这一点与 CommonJS 规范完全不同。CommonJS 模块输出的是值的缓存，不存在动态更新

------
import 的变量是只读的，对象则可以修改其属性（因为对象是指针）；
import {a} from './xxx.js'

a.foo = 'hello'; // 合法操作

建议凡是输入的变量，都当作完全只读，轻易不要改变它的属性。
------
由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。
if (x === 1) {
  import { foo } from 'module1';
} else {
  import { foo } from 'module2';    //不可以
}
------
使用了default，就可以不用{}了

/--------------------------------------------------/

模板字符串
`Hello ${name}, how are you ${time}?`
/--------------------------------------------------/





