计算属性和方法的区别，
计算属性：依赖的值（data）发生了改变，重新计算
方法： 每次都会重新计算


/************************************************************/
侦听属性： watch

  watch: {
    firstName: function (val) {
      this.fullName = val + ' ' + this.lastName
    },
    lastName: function (val) {
      this.fullName = this.firstName + ' ' + val
    }
  }
如果firstName发生了变化，就会触发函数
/************************************************************/

/************************************************************/
class的绑定，通用做法
<div v-bind:class="classObject"></div>
data: {
  classObject: {
    active: true,
    'text-danger': false
  }
}
<div v-bind:class="classObject"></div>
data: {
  isActive: true,
  error: null
},
computed: {
  classObject: function () {
    return {
      active: this.isActive && !this.error,
      'text-danger': this.error && this.error.type === 'fatal'
    }
  }
}
/***************************************************************/

/************************************************************/
条件渲染：

最终的渲染结果将不包含 <template> 元素。
<template v-if="ok">
  <h1>Title</h1>
  <p>Paragraph 1</p>
  <p>Paragraph 2</p>
</template>

有时候，不想用vue的复用机制，添加一个key


不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。

/************************************************************/

/************************************************************/
有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：

<button v-on:click="warn('Form cannot be submitted yet.', $event)">
  Submit
</button>

methods: {
  warn: function (message, event) {
    // 现在我们可以访问原生事件对象
    if (event) event.preventDefault()
    alert(message)
  }
}

/************************************************************/
组件命名

我们强烈推荐遵循 W3C 规范中的自定义组件名 (字母全小写且必须包含一个连字符)。这会帮助你避免和当前以及未来的 HTML 元素相冲突。

HTML 中的特性名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。

不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。
并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent――
导致 myEvent 不可能被监听到。

因此，我们推荐你始终使用 kebab-case 的事件名
/************************************************************/

<input v-model="searchText">等价于  （v-model就是一个语法糖）

<input
  v-bind:value="searchText"
  v-on:input="searchText = $event.target.value"
>

vue子组件传参，props只使用一个单词，不要大写，记住



计算属性其实就是侦听watch

在template里，不需要使用this！！！！

在methods里，要加上this

在组件的子组件内
$emit('your-event')

该组件监听@your-event


组件的模板里可以调用自己。

template一定只能有一个根节点

v-for的优先级最高，所以可以从v-for获取到数组子元素，然后使用它们
            <axis-label
                v-for="(stat, index) in stats"
                :stat="stat"
                :index="index"
                :total="stats.length">
            </axis-label>

prop是单向数据流，父组件的值修改会影响到子组件的值，一般用子组件
的$emit(参数、$event)来实现子组件向父组件的沟通；


html-webpack-plugin生成的html文件放在dist根目录上，放在子目录上，html附属资源加载会有问题
filename: 'html/1.html'  //错误
filename: '1.html'   //正确


//在组件里，data必须是一个函数
Vue.component('button-counter', {
  data: function () {
    return {
      count: 0
    }
  },
  template: '<button v-on:click="count++">You clicked me {{ count }} times.</button>'
})


router的传参，使用props
------------------------------------------------
接收参数的component
<template>
    <div>nested router view{{userId}} {{paramA}} {{paramB}}</div>
</template>
<script>
export default {
    name: 'nested',
    props: {
        userId: String,
        paramA: String,
        paramB: Number,
    }
}
</script>
-----------------------------------------------
this.$router.push({ name: 'nested', params: { userId: '123',paramA: '11',paramB: 20 }});
-------------------------------------------------
router的配置

path: 'nested',
name: 'nested',
component: nested,
props: true,

