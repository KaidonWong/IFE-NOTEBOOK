计算属性和方法的区别，
计算属性：依赖的值（data）发生了改变，重新计算
方法： 每次都会重新计算


/************************************************************/
侦听属性： watch

  watch: {
    firstName: function (val) {
      this.fullName = val + ' ' + this.lastName
    },
    lastName: function (val) {
      this.fullName = this.firstName + ' ' + val
    }
  }
如果firstName发生了变化，就会触发函数
/************************************************************/

/************************************************************/
class的绑定，通用做法
<div v-bind:class="classObject"></div>
data: {
  classObject: {
    active: true,
    'text-danger': false
  }
}
<div v-bind:class="classObject"></div>
data: {
  isActive: true,
  error: null
},
computed: {
  classObject: function () {
    return {
      active: this.isActive && !this.error,
      'text-danger': this.error && this.error.type === 'fatal'
    }
  }
}
-------
用在组件上：
当在一个自定义组件上使用 class 属性时，这些类将被添加到该组件的根元素上面。
/***************************************************************/

/************************************************************/
条件渲染：

最终的渲染结果将不包含 <template> 元素。
<template v-if="ok">
  <h1>Title</h1>
  <p>Paragraph 1</p>
  <p>Paragraph 2</p>
</template>

有时候，不想用vue的复用机制，添加一个key


不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。
v-show 只是简单地切换元素的 CSS 属性 display。

/************************************************************/

数组的更新，不一定触发视图改变，需要变异的方法

变异方法：
push()
pop()
shift()
unshift()
splice()
sort()
reverse()

如果是非变异方法
filter  concat   map  slice
可以用新数组替换旧数组


由于 JavaScript 的限制，Vue 不能检测以下数组的变动：

1 当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue
2 当你修改数组的长度时，例如：vm.items.length = newLength

为了解决第二类问题，你可以使用 splice：

vm.items.splice(newLength)

/************************************************************/
有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：

<button v-on:click="warn('Form cannot be submitted yet.', $event)">
  Submit
</button>

methods: {
  warn: function (message, event) {
    // 现在我们可以访问原生事件对象
    if (event) event.preventDefault()
    alert(message)
  }
}

/************************************************************/
什么时候出现$event?  template里的事件 后面，他们就是DOM事件


v-on:input="searchText = $event.target.value"
v-on:click="warn('Form cannot be submitted yet.', $event)"

对于父组件，是子组件传过来的值

子组件:
v-on:click="$emit('enlarge-text', 0.1)"
父组件：
v-on:enlarge-text="postFontSize += $event"

/************************************************************/
按键修饰符

你可以直接将 KeyboardEvent.key 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。

<input v-on:keyup.page-down="onPageDown">
<input v-on:keyup.enter="submit">

/************************************************************/

可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。

.ctrl
.alt
.shift
.meta

<!-- Ctrl + Click -->
<div @click.ctrl="doSomething">Do something</div>

/************************************************************/

子组件@click.stop   父组件的@click不再触发


/************************************************************/
组件命名

我们强烈推荐遵循 W3C 规范中的自定义组件名 (字母全小写且必须包含一个连字符)。
这会帮助你避免和当前以及未来的 HTML 元素相冲突。

HTML 中的特性名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。 attr
//所以prop的命名不要大小写，只能用-

不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或属性名，
所以就没有理由使用 camelCase 或 PascalCase 了。

并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，
所以 v-on:myEvent 将会变成 v-on:myevent
导致 myEvent 不可能被监听到。

因此，我们推荐你始终使用 kebab-case 的事件名

/************************************************************/

prop 可以定义类型

props: {
  title: String,
  likes: Number,
  isPublished: Boolean,
  commentIds: Array,
  author: Object,
  callback: Function,
  contactsPromise: Promise // or any other constructor
}

那么怎样把 false 传递给 prop 呢？

静态的传递prop
<blog-post title="My journey with Vue"></blog-post>
只能传送字符串

动态的传递prop  //Array ,Boolean, Object 
<blog-post v-bind:comment-ids="[234, 266, 273]"></blog-post>
将不再传递字符串，而是会解析成数组；



/************************************************************/

<input v-model="searchText">等价于  （v-model就是一个语法糖）

<input
  v-bind:value="searchText"
  v-on:input="searchText = $event.target.value"
>

vue子组件传参，props只使用一个单词，不要大写，记住



计算属性其实就是侦听watch



/********************************************************************/
在template里，不需要使用this！！！！

在script里，要加上this, 
/********************************************************************/




在组件的子组件内
$emit('your-event')

该组件监听@your-event


组件的模板里可以调用自己。

template一定只能有一个根节点

v-for的优先级最高，所以可以从v-for获取到数组子元素，然后使用它们
            <axis-label
                v-for="(stat, index) in stats"
                :stat="stat"
                :index="index"
                :total="stats.length">
            </axis-label>

prop是单向数据流，父组件的值修改会影响到子组件的值，一般用子组件
的$emit(事件名,$event)来实现子组件向父组件的沟通；



//在组件里，data必须是一个函数
Vue.component('button-counter', {
  data: function () {
    return {
      count: 0
    }
  },
  template: '<button v-on:click="count++">You clicked me {{ count }} times.</button>'
})


router的传参，使用props
------------------------------------------------
接收参数的component
<template>
    <div>nested router view{{userId}} {{paramA}} {{paramB}}</div>
</template>
<script>
export default {
    name: 'nested',
    props: {
        userId: String,
        paramA: String,
        paramB: Number,
    }
}
</script>
-----------------------------------------------
this.$router.push({ name: 'nested', params: { userId: '123',paramA: '11',paramB: 20 }});
-------------------------------------------------
router的配置

path: 'nested',
name: 'nested',
component: nested,
props: true,


/**************************************************/
对于类型为boolean的props

调用组件时，含有属性就为true,没有就false；

/**************************************************/
路由的嵌套
routes: [
    { path: '/user/:id', component: User,
      children: [
        {
          // 当 /user/:id/profile 匹配成功，
          // UserProfile 会被渲染在 User 的 <router-view> 中
          path: 'profile',
          component: UserProfile
        },
        {
          // 当 /user/:id/posts 匹配成功
          // UserPosts 会被渲染在 User 的 <router-view> 中
          path: 'posts',
          component: UserPosts
        }
      ]
    }
 ]
 要注意，以 / 开头的嵌套路径会被当作根路径。

 此时，基于上面的配置，当你访问 /user/foo 时，User 的出口是不会渲染任何东西，
 这是因为没有匹配到合适的子路由。如果你想要渲染点什么，可以提供一个 空的 子路由：

 // 当 /user/:id 匹配成功，
 // UserHome 会被渲染在 User 的 <router-view> 中
{ path: '', component: UserHome },

/**************************************************/
嵌套中的命名视图
{
  path: '/settings',
  // 你也可以在顶级路由就配置命名视图
  component: UserSettings,
  children: [{
    path: 'emails',
    component: UserEmailsSubscriptions
  }, {
    path: 'profile',
    components: {
      default: UserProfile,
      helper: UserProfilePreview
    }
  }]
}

/**************************************************/
// 命名的路由
router.push({ name: 'user', params: { userId: '123' }})

// 带查询参数，变成 /register?plan=private
router.push({ path: 'register', query: { plan: 'private' }})

/**************************************************/
const userId = '123'
router.push({ name: 'user', params: { userId }}) // -> /user/123
router.push({ path: `/user/${userId}` }) // -> /user/123
// 这里的 params 不生效
router.push({ path: '/user', params: { userId }}) // -> /user
/**************************************************/

一个坑：
data 中使用props来初始化，但是这个值是数组，要注意浅复制！！！修改data仍然会动props的值

/**************************************************/
v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：

text 和 textarea 元素使用 value 属性和 input 事件；
checkbox 和 radio 使用 checked 属性和 change 事件；
select 字段将 value 作为 prop 并将 change 作为事件。

/**************************************************/
自定义组件的v-model
model: {
    prop: 'checked',
    event: 'change'
},
这里的 lovingVue 的值将会传入这个名为 checked 的 prop。
同时当 <base-checkbox> 触发一个 change 事件并附带一个
新的值的时候，这个 lovingVue 的属性将会被更新。

/**************************************************/
keep-alive  用于动态组件

<!-- 失活的组件将会被缓存！-->
<keep-alive>
  <component v-bind:is="currentTabComponent"></component>
</keep-alive>

/**************************************************/
VUEX

对于getter
通过属性访问（不需要传参数）
getters: {
    doneTodos: state => {
      return state.todos.filter(todo => todo.done)
    }
}

通过方法访问（需要传参数）
getters: {
  getTodoById: (state) => (id) => {
    return state.todos.find(todo => todo.id === id)
  }
}
一个是返回属性，一个是返回方法



/**************************************************/

/**************************************************/

/**************************************************/