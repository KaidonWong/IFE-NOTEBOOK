核心概念：
入口： 原来的JS文件起点；

出口： 生成的JS文件

loader： 非JS 文件的处理，如CSS
1，TypeScript转换为 JavaScript
2，内联图像转换为 data URL
3， JavaScript 模块中 import CSS文件




module: {
    rules: [
      { test: /\.txt$/, use: 'raw-loader' }
    ]
  }
“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 '.txt' 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。”



插件：插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量


多页面应用的入口：

const config = {
  entry: {
    pageOne: './src/pageOne/index.js',
    pageTwo: './src/pageTwo/index.js',
    pageThree: './src/pageThree/index.js'
  }
};

出口也要多一点了
{
  entry: {
    app: './src/app.js',
    search: './src/search.js'
  },
  output: {
    filename: '[name].js',
    path: __dirname + '/dist'
  }
  // 会写入到硬盘：./dist/app.js, ./dist/search.js
}


这个插件兼容有问题，安装如下
npm install extract-text-webpack-plugin@next --save-dev
上面的被淘汰了，用mini-css-extract-plugin


html-webpack-plugin生成的html文件放在dist根目录上，放在子目录上，html附属资源加载会有问题
filename: 'html/1.html'  //错误
filename: '1.html'   //正确




